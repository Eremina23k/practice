from fastapi import APIRouter, HTTPException, Depends
from sqlalchemy.orm import Session

from database import get_db
from crud.user import create_user, get_user, get_user_by_login, update_user, delete_user
from schemas import UserIn, UserOut, UserRole
from auth import authenticate_user, require_role  # üëà –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏

router = APIRouter(prefix="/users", tags=["Users"])

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 
@router.post("/", response_model=UserOut)
def create_u(user: UserIn, db: Session = Depends(get_db)):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ª–æ–≥–∏–Ω —É–Ω–∏–∫–∞–ª–µ–Ω
    db_user = get_user_by_login(db, user.login)
    if db_user:
        raise HTTPException(status_code=400, detail="Login already registered")
    # –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–æ–π —Ä–æ–ª—å—é, —á—Ç–æ –ø–µ—Ä–µ–¥–∞–ª–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ
    return create_user(db, user)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–æ—Å—Ç—É–ø–Ω–æ –ª—é–±–æ–º—É –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é)
@router.get("/{user_id}", response_model=UserOut)
def read_u(user_id: int, db: Session = Depends(get_db), _: UserOut = Depends(authenticate_user)):
    db_user = get_user(db, user_id)
    if db_user is None:
        raise HTTPException(status_code=404, detail="User not found")
    return db_user

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ)
@router.put("/{user_id}", response_model=UserOut, dependencies=[Depends(require_role(UserRole.admin))])
def update_u(user_id: int, user_update: dict, db: Session = Depends(get_db)):
    updated_user = update_user(db, user_id, user_update)
    if not updated_user:
        raise HTTPException(status_code=404, detail="User not found")
    return updated_user

# –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
@router.delete("/{user_id}", response_model=UserOut, dependencies=[Depends(require_role(UserRole.admin))])
def remove_u(user_id: int, db: Session = Depends(get_db)):
    deleted_user = delete_user(db, user_id)
    if not deleted_user:
        raise HTTPException(status_code=404, detail="User not found")
    return deleted_user